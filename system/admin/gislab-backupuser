#!/bin/bash

set -e

source /etc/gislab_version
source $GISLAB_ROOT/system/functions.sh


# require root privileges
gislab_require_root


### USAGE
function usage() {
    echo "USAGE: $(basename $0) username"
    echo "Backup GIS.lab user account."
    echo -e "\nOPTIONS
    -d backup directory (optional, default: /storage/backup)
    -h display this help
    "
    exit 255
}


### OPTIONS
opt_backup_dir="$GISLAB_PATH_BACKUP"

while getopts "d:h" OPTION
do
    case "$OPTION" in
        d) opt_backup_dir="$OPTARG" ;;
        h) usage ;;
        \?) exit 1 ;;
    esac
done
shift $(($OPTIND - 1))
if [ $# -eq 0 ]; then usage; fi

GISLAB_USER=$1


### VARIABLES
user_home_dir=$GISLAB_PATH_HOME/$GISLAB_USER

date=$(date '+%Y-%m-%d:%H-%M-%S')
tmp_dir=${opt_backup_dir}/${GISLAB_USER}-${date}.backup

home_backup_file=$tmp_dir/home.tar
publish_backup_file=$tmp_dir/publish.tar.bz2
db_backup_file=$tmp_dir/postgresql.dump
ldap_backup_file=$tmp_dir/ldap.dump
backup_file=$opt_backup_dir/$GISLAB_UNIQUE_ID-$GISLAB_USER-$date.tar

lds="ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:///"


### SANITY CHECKS
if [ "$($lds "(&(objectClass=posixAccount)(uid=$GISLAB_USER))")" == "" ]; then
    gislab_error "User '$GISLAB_USER' doesn't exists"
    exit 1
fi


### MAIN SCRIPT
mkdir -p $opt_backup_dir
chmod 700 $opt_backup_dir

mkdir -p $tmp_dir


# GIS.lab VERSION
echo $GISLAB_VERSION > $tmp_dir/GISLAB_VERSION


# HOME DIRECTORY
# load home directory names from XDG
if [ -f $user_home_dir/.config/user-dirs.dirs ]; then
    source $user_home_dir/.config/user-dirs.dirs
    exclude=" --exclude=$user_home_dir/$(basename $XDG_DOWNLOAD_DIR)"
fi

tar -cf $home_backup_file \
    --exclude="$user_home_dir/.*" \
    --exclude=$user_home_dir/Barrel \
    --exclude=$user_home_dir/Booster \
    --exclude=$user_home_dir/Publish \
    --exclude=$user_home_dir/Repository \
    $exclude \
    $user_home_dir

if ls $user_home_dir/.config/user-dirs.* >/dev/null 2>&1; then
    tar -rf $home_backup_file $user_home_dir/.config/user-dirs.*
fi

# .gislab directory
tar -rf $home_backup_file \
    --exclude=$user_home_dir/.gislab/session.lock $user_home_dir/.gislab

# BASH
if ls $user_home_dir/.bash_history >/dev/null 2>&1; then
    tar -rf $home_backup_file $user_home_dir/.bash_history
fi

# FIREFOX
if ls $user_home_dir/.mozilla/firefox/*.default >/dev/null 2>&1; then
    tar -rf $home_backup_file $user_home_dir/.mozilla/firefox/profiles.ini
    tar -rf $home_backup_file $user_home_dir/.mozilla/firefox/*.default
fi

# QGIS
if ls $user_home_dir/.config/QGIS/QGIS2.conf >/dev/null 2>&1; then
    tar -rf $home_backup_file $user_home_dir/.config/QGIS/QGIS2.conf
fi

if ls $user_home_dir/.qgis2/*.db >/dev/null 2>&1; then
    tar -rf $home_backup_file $user_home_dir/.qgis2/*.db
fi

# GRASS
if ls $user_home_dir/.grass7 >/dev/null 2>&1; then
    tar -rf $home_backup_file $user_home_dir/.grass7
fi

if ls $user_home_dir/grassdata >/dev/null 2>&1; then
    tar -rf $home_backup_file $user_home_dir/grassdata
fi

bzip2 $home_backup_file


# PUBLISHED PROJECTS
tar -cjf $publish_backup_file /storage/publish/$GISLAB_USER


# DATABASE DATA
cd $tmp_dir # leave root's home dir before sudo to postgres

psql -U postgres -d gislab \
    -c "DROP TABLE IF EXISTS ${GISLAB_USER}.gislab_ball;" > /dev/null
psql -U postgres -d gislab \
    -c "DROP TABLE IF EXISTS ${GISLAB_USER}.gislab_drawing;" > /dev/null

# include data from GIS.lab Web client only if client is installed
ball_exist_sql="SELECT 1
                    FROM information_schema.tables
                    WHERE table_name = 'storage_ball';"

if [[ $(psql -U postgres -d gislab -tAc "$ball_exist_sql") == "1" ]]; then
    psql -U postgres -d gislab \
        -c "CREATE TABLE ${GISLAB_USER}.gislab_ball AS
                SELECT * FROM storage_ball
                WHERE \"user\" = '$GISLAB_USER';"
    psql -U postgres -d gislab \
        -c "CREATE TABLE ${GISLAB_USER}.gislab_drawing AS
                SELECT * FROM storage_drawing
                WHERE \"user\" = '$GISLAB_USER';"
fi

# backup
pg_dump -U postgres \
    -Fc --schema=$GISLAB_USER gislab > $db_backup_file

psql -U postgres -d gislab \
    -c "DROP TABLE IF EXISTS ${GISLAB_USER}.gislab_ball;" > /dev/null
psql -U postgres -d gislab \
    -c "DROP TABLE IF EXISTS ${GISLAB_USER}.gislab_drawing;" > /dev/null


# LDAP DATA
ldapfinger -u $GISLAB_USER > $ldap_backup_file
if [ "$($lds "(&(objectClass=posixGroup)(cn=gislabadmins)(memberUid=$GISLAB_USER))")" != "" ]; then
    echo "#superuser" >> $ldap_backup_file  # superuser permissions
fi

# create backup file and clean up
tar -C $tmp_dir -cf $backup_file *
chmod 400 $backup_file

rm -rf $tmp_dir


### CONFIRMATION MESSAGE
gislab_success "Backup of account '$GISLAB_USER' created in '$backup_file'"

# vim: set ts=8 sts=4 sw=4 et:
