#!/bin/bash

set -e

source /etc/gislab_version
source $GISLAB_ROOT/system/functions.sh


# require root privileges
gislab_require_root


### USAGE
function usage() {
    echo "USAGE: $(basename $0) [OPTIONS] username"
    echo "Restore GIS.lab user account from backup archive."
    echo -e "\nOPTIONS
    -f  backup archive file to restore account from
    -h  display this help"
    exit 255
}


### OPTIONS
while getopts "b:f:h" OPTION
do
    case "$OPTION" in
        f) opt_backup_file="$OPTARG" ;;
        h) usage ;;
        \?) exit 1 ;;
    esac
done
shift $(($OPTIND - 1))
if [ $# -eq 0 ]; then usage; fi

if [ -z "$opt_backup_file" ]; then
    usage
fi

GISLAB_USER=$1


### VARIABLES
date=$(date '+%Y-%m-%d:%H-%M-%S')
backup_dir="$GISLAB_PATH_BACKUP"
tmp_dir=$backup_dir/${GISLAB_USER}-${date}.restore

lds="ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:///"


### SANITY CHECKS
if [ ! -f "$opt_backup_file" ]; then
    gislab_error "Backup file does not exist"
    exit 1
fi

if [ "$($lds "(&(objectClass=posixAccount)(uid=$GISLAB_USER))")" != "" ]; then
    gislab_error "User '$GISLAB_USER' already exists"
    exit 1
fi

backup_version=$(tar --to-stdout -xf $opt_backup_file GISLAB_VERSION)
if [ "$backup_version" != "$GISLAB_VERSION" ]; then
    gislab_warning "
        Backup source version doesn't match target version
        ('$backup_version' != '$GISLAB_VERSION')
    "
fi


### MAIN SCRIPT
# prepare directories structure
mkdir -p $tmp_dir


# untar backup file
tar -C $tmp_dir -xPf $opt_backup_file
cd $tmp_dir

for file in *.bz2; do
    dir=$(basename ${file%%.tar.bz2})
    mkdir -p $dir
    tar -C $tmp_dir/$dir -xjf $file
done


# get user LDAP attributes from backup
while read line; do
    attr=$(echo $line | awk -F: '{ print $1 }')
    val=$(echo $line | sed 's/^[[:alnum:]]\+::\? //')

    # check if value is base64 encoded (two colon after attribute name instead of one)
    # and decode this value
    if echo "$line" | grep -q '^[^ :]\+:: ' && [[ "$attr" != "userPassword" ]]; then
        val="$(echo "$val" | base64 -d)"
    fi

    case "$attr" in
        uid) user_orig="$val" ;;
        givenName) given_name="$val" ;;
        sn) surname="$val" ;;
        mail) email="$val" ;;
        description) description="$val" ;;
        userPassword) password_crypt="$val" ;;
        \#superuser) superuser="-s" ;;
    esac
done < ldap.dump


# create user account
gislab-adduser -g "$given_name" \
               -l "$surname" \
               -m "$email" \
               -d "$description" \
               $superuser \
               $GISLAB_USER


# PASSWORD
ldapmodifyuser $GISLAB_USER > /dev/null << EOL
changetype: modify
replace: userPassword
userPassword:: $password_crypt
EOL
gislab_info "Original password restored from backup"


# HOME DATA
rsync -a home/$user_orig/ $GISLAB_PATH_HOME/$GISLAB_USER/

if [ -f home/$user_orig/.config/user-dirs.dirs ]; then
    source home/$user_orig/.config/user-dirs.dirs
    mkdir -p $GISLAB_PATH_HOME/$GISLAB_USER/$(basename $XDG_DOWNLOAD_DIR)
fi

chown -R $GISLAB_USER:gislabusers $GISLAB_PATH_HOME/$GISLAB_USER


# PUBLISHED DATA
rsync -a publish/$user_orig/ $GISLAB_PATH_PUBLISH/$GISLAB_USER/
chown -R $GISLAB_USER:www-data $GISLAB_PATH_PUBLISH/$GISLAB_USER


# DATABASE DATA
pg_restore -U postgres -d gislab -n $GISLAB_USER postgresql.dump


# clean up
rm -rf $tmp_dir


### CONFIRMATION MESSAGE
gislab_success "Account '$GISLAB_USER' restored from '$opt_backup_file'"

# vim: set ts=8 sts=4 sw=4 et:
