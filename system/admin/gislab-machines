#!/bin/bash

set -e

source /etc/gislab_version
source $GISLAB_ROOT/system/functions.sh


# require root privileges
gislab_require_root


### USAGE
function usage() {
    echo "USAGE: $(basename $0) [OPTIONS] MAC,MAC,..."
    echo "Add or remove GIS.lab client machines to/from list of known machines."
    echo "
If 'unknown machines' policy is set to 'deny', only known machines will be
authorized for connection to GIS.lab network. If 'unknown machines' policy is
set to 'allow', all machines will be authorized to connect.

MAC addresses must be specified in format MM:MM:MM:SS:SS:SS."
    echo -e "\nOPTIONS
    -h  display this help
    -l  print a list of known machines
    -a  add machines to known list. If value 'all' is given instead of MAC
        address, 'unknown machines' policy will be set to 'allow'
    -r  remove machines from known list. If value 'all' is given instead of
        MAC address, 'unknown machines' policy will be set to 'deny'
    "
    exit 255
}


### OPTIONS
while getopts "larh" OPTION
do
        case "$OPTION" in
            l) opt_action="list" ;;
            a) opt_action="add" ;;
            r) opt_action="remove" ;;
            h) usage ;;
            \?) exit 1;;
        esac
done
shift $(($OPTIND - 1))
if [ $# -eq 0 -a "$opt_action" != "list" ]; then usage; fi


### VARIABLES
policy_file=$GISLAB_PATH_SECRET/gislab_unknown_machines_policy.conf
dhcp_file=/etc/dhcp/gislab_known_machines.conf
mac_rx="^[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}$"
lds="ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:/// -b "ou=MACs,ou=Machines,dc=gis,dc=lab""
lda="ldapadd -Z -y /etc/ldapscripts/ldapscripts.passwd -D "cn=admin,dc=gis,dc=lab""
ldd="ldapdelete -Z -y /etc/ldapscripts/ldapscripts.passwd -D "cn=admin,dc=gis,dc=lab""


### FUNCTIONS
function list_machines {
    $lds macAddress | awk '/^macAddress:/ { print $2 }'
}

function known_machines_policy {
    # set known machines policy to 'allow' or 'deny'

    msg="Setting 'unknown machines' policy to '$1'"
    gislab_warning "$msg"
    logger -t gislab-machines $msg
    sed "s/{+ GISLAB_UNKNOWN_MACHINES_POLICY +}/$1/g" \
        /etc/dhcp/dhcpd.conf.templ > /etc/dhcp/dhcpd.conf
    echo "$1" > $policy_file
}

function known_machines_dhcp_file {
    # generate DHCP server configuration from MACs list in LDAP database

    echo -e "group {" > $dhcp_file    # opening bracket

    for mac in $(list_machines); do
        hostname=$(echo $mac | sed 's/://g')
        echo -e "\thost $hostname { hardware ethernet $mac; }" >> $dhcp_file
    done

    echo -e "}" >> $dhcp_file        # closing bracket
}


### MAIN SCRIPT
# LIST
if [ "$opt_action" == "list" ]; then
    echo "Policy: $(cat $policy_file)"
    echo "Known machines:"
    for mac in $(list_machines); do
        echo -e "  * $mac"
    done

# ADD
elif [ "$opt_action" == "add" ]; then
    IFS=', ' read -a maclist <<< "$1"

    for mac in "${maclist[@]}"; do

        # change policy to 'allow'
        if [ "$mac" == "all" ]; then
            known_machines_policy allow

        # add MAC address if format is valid
        else
            if [[ "$mac" =~ $mac_rx ]]; then
                echo "Adding MAC address $mac"
                # replace uppercase letters to lowercase
                mac=$(echo $mac | tr '[:upper:]' '[:lower:]')
                machine_cn=$(echo $mac | sed 's/://g')
                # avoid duplicates
                list_machines | grep -q "^$mac$" && continue

                # add records to MACs list in LDAP database
                $lda >/dev/null << EOL
dn: cn=$machine_cn,ou=MACs,ou=Machines,dc=gis,dc=lab
objectClass: top
objectClass: device
objectClass: ieee802Device
cn: $machine_cn
macAddress: $mac
EOL

                # generate known machines DHCP configuration file
                known_machines_dhcp_file
            else
                gislab_warning "Invalid MAC format ($mac). Skipping ..."
            fi
        fi
    done

    service isc-dhcp-server restart
    gislab_success "Machines added successfully"

# REMOVE
elif [ "$opt_action" == "remove" ]; then
    IFS=', ' read -a maclist <<< "$1"

    for mac in "${maclist[@]}"; do

        # change policy to 'deny'
        if [ "$mac" == "all" ]; then
            known_machines_policy deny

        # remove MAC address
        else
            echo "Removing MAC $mac"
            # replace uppercase letters to lowercase
            mac=$(echo $mac | tr '[:upper:]' '[:lower:]')
            machine_cn=$(echo $mac | sed 's/://g')

            # skip removing non existing machine
            list_machines | grep -q "^$mac$" || continue

            # remove records MACs list from LDAP database
            $ldd "cn=$machine_cn,ou=MACs,ou=Machines,dc=gis,dc=lab" >/dev/null

            # generate known machines DHCP configuration file
            known_machines_dhcp_file
        fi
    done

    service isc-dhcp-server restart
    gislab_success "Machines removed successfully"
fi

# vim: set ts=8 sts=4 sw=4 et:
