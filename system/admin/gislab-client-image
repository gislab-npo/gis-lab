#!/bin/bash

set -e
set -o pipefail

source /etc/gislab_version
source $GISLAB_ROOT/system/functions.sh


# require root privileges
gislab_require_root


### USAGE
function usage() {
    echo "USAGE: $(basename $0)"
    echo "Build GIS.lab client image from current GIS.lab client chroot."
    echo -e "\nOPTIONS
    -h display this help
    "
    exit 255
}


### OPTIONS
while getopts "h" OPTION
do
    case "$OPTION" in
        h) usage ;;
        \?) exit 255 ;;
    esac
done


### VARIABLES
image_file=$GISLAB_PATH_SYSTEM/clients/desktop/image/gislab.img
buildstamp=$(date +%s)
bstamp_file_image=$GISLAB_PATH_SYSTEM/clients/desktop/image/gislab_desktop.buildstamp
bstamp_file_root=$GISLAB_PATH_SYSTEM/clients/desktop/root/etc/gislab_desktop.buildstamp
mnt_dir="$GISLAB_PATH_SYSTEM/clients/desktop/mnt-$GISLAB_INSTALL_UNIQUE_STRING"
tftp_dir=/var/lib/tftpboot/gislab


### SANITY CHECKS
if [ -f "$GISLAB_PATH_SYSTEM/clients/desktop/root/proc/version" ]; then
    gislab_error "
        GIS.lab client chroot session is active.
        Exit from it before running this command
    "
    exit 1
fi


### MAIN SCRIPT
# get GIS.lab provider
if [ -f /etc/gislab_provider ]; then
    GISLAB_PROVIDER="$(cat /etc/gislab_provider)"
fi

GISLAB_PROVIDER="${GISLAB_PROVIDER:-default}"


# install image version file in to client chroot
echo "$buildstamp" > $bstamp_file_root


# create directory for image
mkdir -p $GISLAB_PATH_SYSTEM/clients/desktop/image


if [ "$GISLAB_PROVIDER" == "aws" ]; then
    ### Build GIS.lab AWS client image ###
    # create temporary mount dir for image
    mkdir $mnt_dir

    # calculate the size of image = client root size + 500MB
    root_size=$(du -sm $GISLAB_PATH_SYSTEM/clients/desktop/root | cut -f 1)
    image_size=$(echo $(($root_size+500)))

    dd if=/dev/zero of=$image_file bs=1M count=$image_size
    mkfs.ext4 -F -L gislab-rootfs $image_file

    # mount image
    mount -o loop,rw $image_file $mnt_dir

    # copy GIS.lab client root to AWS client image
    rsync -a $GISLAB_PATH_SYSTEM/clients/desktop/root/ $mnt_dir/

    # unmount GIS.lab AWS client image
    umount $mnt_dir

    # clean up
    rm -rf $mnt_dir
else
    ### Build default GIS.lab client image ###
    # install boot files to TFTP server directory
    cp \
        $GISLAB_PATH_SYSTEM/clients/desktop/root/usr/lib/PXELINUX/pxelinux.0 \
        $tftp_dir/pxelinux.0
    cp \
        $GISLAB_PATH_SYSTEM/clients/desktop/root/usr/lib/PXELINUX/gpxelinux.0 \
        $tftp_dir/gpxelinux.0
    # see https://bugs.launchpad.net/ubuntu/+source/syslinux/+bug/1577554
    cp \
        $GISLAB_PATH_SYSTEM/clients/desktop/root/usr/lib/syslinux/modules/bios/ldlinux.c32 \
        $tftp_dir/ldlinux.c32

    cp -a $GISLAB_PATH_SYSTEM/clients/desktop/root/boot/. $tftp_dir/

    # set permissions
    find $tftp_dir -mindepth 1 -type d -exec chmod 0755 "{}" \;
    find $tftp_dir -mindepth 1 \! -type d -exec chmod 0644 "{}" \;

    # build image
    test -x /usr/bin/nice \
        && nice=nice \
        || unset nice
    test -x /usr/bin/ionice \
        && /usr/bin/ionice -c3 true 2>/dev/null \
        && ionice=ionice \
        || unset ionice

    rm -f $image_file.tmp

    $nice $ionice \
        mksquashfs $GISLAB_PATH_SYSTEM/clients/desktop/root $image_file.tmp \
        -e cdrom

    if [ $? -ne 0 ]; then
        rm -f $image_file.tmp
        gislab_error "
            'mksquashfs' failed to build the GIS.lab client image
        "
        exit 1
    fi

    # place image to final destination
    mv $image_file.tmp $image_file
fi

echo "$buildstamp" > $bstamp_file_image


### CONFIRMATION MESSAGE
gislab_success "Image was successfully created"

# vim: set ts=8 sts=4 sw=4 et:
