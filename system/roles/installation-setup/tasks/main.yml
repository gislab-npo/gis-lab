---
#
### INSTALLATION SETUP ###
#
# Set basic environment. This role is used both for installation and tests.

### PYTHON 2 INSTALLATION
- name: Ensure Python 2 is installed before running Ansible modules
  raw: >
    export http_proxy="{{ GISLAB_APT_HTTP_PROXY }}"
    &&
    apt update --assume-yes
    &&
    apt install --assume-yes python-minimal

- name: Gather Ansible facts
  setup:


### SANITY CHECKS
- name: Check Ansible version (== 2)
  assert:
    that:
      - ansible_version.major == 2
      - ansible_version.minor >= 1

- name: Check if server is running supported operating system
  assert:
    that:
      - ansible_distribution == "Ubuntu"
      - ansible_distribution_version == "{{ GISLAB_UBUNTU_VERSION_NUMBER }}"


### FACTS
# TODO: [WARNING]: Consider using git module rather than running git
- name: Detect if it is possible to get GIS.lab version from Git
  local_action: shell git describe 2> /dev/null || echo "GIT-NOT-AVAILABLE"
  become: no
  register: gislab_version_git_status
  changed_when: False

- name: Detect GIS.lab version from Git
  local_action: shell git describe
  become: no
  register: gislab_version
  when: gislab_version_git_status.stdout != "GIT-NOT-AVAILABLE"

- name: Set GIS.lab version from Git
  set_fact:
    GISLAB_VERSION: "{{ gislab_version.stdout }}"
  when: gislab_version_git_status.stdout != "GIT-NOT-AVAILABLE"


- name: Generate unique string for this installation or test
  shell: date +%s | md5sum | head -c 24
  register: gislab_install_unique_string
  changed_when: False

- name: Set unique string for installation
  set_fact:
    GISLAB_INSTALL_UNIQUE_STRING: "{{ gislab_install_unique_string.stdout }}"

- name: Set unique string for test run
  set_fact:
    GISLAB_TEST_UNIQUE_STRING: "{{ GISLAB_INSTALL_UNIQUE_STRING }}"


- name: Detect GIS.lab unique ID
  set_fact:
    GISLAB_UNIQUE_ID: "{{ inventory_hostname }}"


- name: Detect GIS.lab provider
  shell: cat /etc/gislab_provider 2>/dev/null || echo 'default'
  register: gislab_provider
  changed_when: False

- name: Set GIS.lab provider variable
  set_fact:
    GISLAB_PROVIDER: "{{ gislab_provider.stdout }}"


- name: Detect GIS.lab install action (new installation or upgrade)
  stat: path=/storage/log/installation.done
  register: installation_done
  changed_when: False

- name: Set GIS.lab install action variable (install)
  set_fact:
    GISLAB_INSTALL_ACTION: install
  when: installation_done.stat.exists == false

- name: Set GIS.lab install action variable (upgrade)
  set_fact:
    GISLAB_INSTALL_ACTION: upgrade
  when: installation_done.stat.exists == true


- name: Detect current date and time
  set_fact:
    GISLAB_INSTALL_DATETIME: "{{ ansible_date_time.date }}-{{ ansible_date_time.time }}"

- name: Detect provisioning user name
  set_fact:
    GISLAB_PROVISIONING_USER: "{{ ansible_ssh_user }}"

- name: Detect architecture
  set_fact:
    GISLAB_SERVER_ARCHITECTURE: "{{ ansible_architecture }}"

- name: Set GIS.lab network as list
  set_fact:
    GISLAB_NETWORK_AS_LIST: "{{ GISLAB_NETWORK|split_string('.') }}"

- name: Set GIS.lab network server IP
  set_fact:
    GISLAB_NETWORK_SERVER_IP: "{{ GISLAB_NETWORK }}.5"

- name: Detect closest apt mirror based on geographic location
  uri:
    url: http://mirrors.ubuntu.com/mirrors.txt
    return_content: yes
  register: apt_mirrors

- name: Set apt mirror
  set_fact:
    GISLAB_APT_MIRROR: "{{ apt_mirrors.content.splitlines()[0] }}"


### CAPABILITIES
# VPN
- name: Detect capability to provide VPN service
  # tun device can be missing on systems running in container
  stat: path=/dev/net/tun
  register: cap_tun_device_status
  changed_when: False

- name: Enable capability to provide VPN service
  set_fact:
    GISLAB_SERVER_CAPABILITY_VPN: yes
  when:
    cap_tun_device_status.stat.ischr is defined
    and
    cap_tun_device_status.stat.ischr

- name: Disable capability to provide VPN service
  set_fact:
    GISLAB_SERVER_CAPABILITY_VPN: no
  when: cap_tun_device_status.stat.ischr is not defined


### PATH VARIABLES
# system-wide path variables
# can be used in Ansible and shell scripts
# don't forget to add to 'functions.sh' when adding variable here !
- name: Set GIS.lab installation root directory
  set_fact:
    GISLAB_ROOT: /opt/gislab


- name: Set GIS.lab admin tools installation root directory
  set_fact:
    GISLAB_PATH_ADMIN: "{{ GISLAB_ROOT }}/admin"

- name: Set GIS.lab custom installation root directory
  set_fact:
    GISLAB_PATH_CUSTOM: "{{ GISLAB_ROOT }}/custom"

- name: Set GIS.lab secret files installation root directory
  set_fact:
    GISLAB_PATH_SECRET: "{{ GISLAB_ROOT }}/secret"

- name: Set GIS.lab system installation root directory
  set_fact:
    GISLAB_PATH_SYSTEM: "{{ GISLAB_ROOT }}/system"


- name: Set GIS.lab storage root directory
  set_fact:
    GISLAB_PATH_STORAGE: "/storage"

- name: Set GIS.lab applications storage root directory
  set_fact:
    GISLAB_PATH_APPLICATIONS: "{{ GISLAB_PATH_STORAGE }}/applications"

- name: Set GIS.lab backup storage root directory
  set_fact:
    GISLAB_PATH_BACKUP: "{{ GISLAB_PATH_STORAGE }}/backup"

- name: Set GIS.lab cache storage root directory
  set_fact:
    GISLAB_PATH_CACHE: "{{ GISLAB_PATH_STORAGE }}/cache"

- name: Set GIS.lab home root directory
  set_fact:
    GISLAB_PATH_HOME: "{{ GISLAB_PATH_STORAGE }}/home"

- name: Set GIS.lab logs root directory
  set_fact:
    GISLAB_PATH_LOG: "{{ GISLAB_PATH_STORAGE }}/log"


- name: Set GIS.lab default www root directory
  set_fact:
    GISLAB_PATH_WWW: "/var/www/default"


# temporary variable valid only for Ansible
- name: Set temporary directory for installation or test
  set_fact:
    GISLAB_PATH_TMP: /tmp/gislab-{{ GISLAB_INSTALL_UNIQUE_STRING }}


### DIRECTORIES STRUCTURE
- name: Create GIS.lab directories structure
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
    state: directory
  with_items:
    - {
        path: "{{ GISLAB_ROOT }}",
        owner: root,
        group: root,
        mode: "0755"
      }
    - {
        path: "{{ GISLAB_PATH_ADMIN }}",
        owner: root,
        group: root,
        mode: "0755"
      }
    - {
        path: "{{ GISLAB_PATH_CUSTOM }}",
        owner: root,
        group: root,
        mode: "0755"
      }
    - {
        path: "{{ GISLAB_PATH_SECRET }}",
        owner: root,
        group: root,
        mode: "0700"
      }
    - {
        path: "{{ GISLAB_PATH_SYSTEM }}",
        owner: root,
        group: root,
        mode: "0755"
      }
    - {
        path: "{{ GISLAB_PATH_STORAGE }}",
        owner: root,
        group: root,
        mode: "0755"
      }
    - {
        path: "{{ GISLAB_PATH_APPLICATIONS }}",
        owner: root,
        group: root,
        mode: "0755"
      }
    - {
        path: "{{ GISLAB_PATH_BACKUP }}",
        owner: root,
        group: root,
        mode: "0755"
      }
    - {
        path: "{{ GISLAB_PATH_CACHE }}",
        owner: root,
        group: root,
        mode: "0755"
      }
    - {
        path: "{{ GISLAB_PATH_HOME }}",
        owner: root,
        group: root,
        mode: "0755"
      }
    - {
        path: "{{ GISLAB_PATH_LOG }}",
        owner: root,
        group: root,
        mode: "0755"
      }
    - {
        path: "{{ GISLAB_PATH_WWW }}",
        owner: root,
        group: root,
        mode: "0755"
      }
    - {
        path: "{{ GISLAB_PATH_TMP }}",
        owner: root,
        group: root,
        mode: "0755"
      }

# vim: set ts=8 sts=2 sw=2 et:
