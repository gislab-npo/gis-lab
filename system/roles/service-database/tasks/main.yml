---
#
### DATABASE SERVER - POSTGRESQL/POSTGIS ###
#
# Install and configure database server and create GIS template database.
#
# Logging: syslog


- name: Install packages
  apt:
    pkg: "{{ item }}"
    force: yes
    install_recommends: no
    state: latest
  with_items:
    - libpq-dev
    - postgis
    - postgresql
    - postgresql-10-postgis-2.4
    - postgresql-10-postgis-2.4-scripts
    - postgresql-comparator
    - postgresql-contrib
    - python-psycopg2
    - postgresql-10-pgrouting
    - osm2pgrouting
    - gdal-bin


# version and paths detection
- name: Detect PostgreSQL version
  shell: >
    pg_config --version
    | awk -F ' ' '{print $2}'
    | awk -F '.' '{print $1}'
  register: pg_version
  changed_when: False

- name: Detect PostgreSQL shared dir
  shell: pg_config --sharedir
  register: pg_sharedir
  changed_when: False


# installation of additional tools
- name: Install Audit trigger
  copy:
    src: static/audit-trigger/audit.sql
    dest: "{{ pg_sharedir.stdout }}/contrib/audit.sql"

- name: Install PostGIS template script
  copy:
    src: static/template-postgis/template-postgis.sql
    dest: "{{ pg_sharedir.stdout }}/contrib/template-postgis.sql"


# kernel tuning
- name: Adjust system shmmax value to one fourth of system memory size
  sysctl:
    name: kernel.shmmax
    value: "{{ ansible_memtotal_mb|postgresql_shm }}"
    state: present
    sysctl_set: yes


# postgreSQL cluster storage
- name: Drop initial PostgreSQL cluster from '/var/lib/postgresql' if exists
  shell: pg_dropcluster --stop {{ pg_version.stdout }} main
  args:
    removes: /var/lib/postgresql/{{ pg_version.stdout }}/main/PG_VERSION

- name: Prepare directory for new PostgreSQL cluster storage
  file:
    path: "{{ GISLAB_PATH_APPLICATIONS }}/postgresql"
    state: directory
    owner: postgres
    group: postgres

- name: Create new PostgreSQL cluster in storage if not exists
  shell: >
    LC_ALL=en_US.UTF-8
    pg_createcluster
    --locale en_US.UTF-8
    --datadir={{ GISLAB_PATH_APPLICATIONS }}/postgresql
    {{ pg_version.stdout }} main
  args:
    creates: "{{ GISLAB_PATH_APPLICATIONS }}/postgresql/PG_VERSION"


# postgresql configuration
- name: Configure PostgreSQL
  template:
    src: postgresql/postgresql.conf.j2
    dest: /etc/postgresql/{{ pg_version.stdout }}/main/postgresql.conf
  notify:
    - service postgresql restart

- name: Create PostgreSQL conf.d directory
  file:
    name: "{{ postgresql_conf_directory }}/main/conf.d"
    state: directory

- name: Tune PostgreSQL configuration
  postgresql_tune:
    db_version: "{{ postgresql_version }}"
    db_type: "{{ postgresql_tune_db_type }}"
    total_memory: "{{ postgresql_tune_total_memory }}"
    postgresql_file: "{{ postgresql_conf_directory }}/main/conf.d/99-postgresql-tune.conf"
    max_connections: "{{ postgresql_tune_connections }}"
    sysctl_file: "{{ postgresql_sysctl_conf }}"

- name: Configure PostgreSQL access policy
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - {
        src: postgresql/pg_hba.conf.j2,
        dest: "/etc/postgresql/{{ pg_version.stdout }}/main/pg_hba.conf"
      }
    - {
        src: postgresql/pg_ident.conf.j2,
        dest: "/etc/postgresql/{{ pg_version.stdout }}/main/pg_ident.conf"
      }
  notify:
    - service postgresql restart

# TODO
# For simplicity i have used LDAP CA certificate and private key for signing
# PostgreSQL certificate.
# I propose to create global GIS.lab CA for signing all other certificates.

- name: Generate certificate and private key for encrypted PostgreSQL communication (run only once)
  shell: "{{ item }}"
  with_items:
    - certtool --generate-privkey
      --bits 2048
      --outfile {{ GISLAB_PATH_SECRET }}/gislab_postgres_private_server_postgres_key.pem
    - certtool
      --generate-certificate
      --load-privkey {{ GISLAB_PATH_SECRET }}/gislab_postgres_private_server_postgres_key.pem
      --load-ca-certificate /etc/ssl/certs/cacert.pem
      --load-ca-privkey /etc/ssl/private/cakey.pem
      --template /etc/ssl/server.info
      --outfile {{ GISLAB_PATH_SECRET }}/gislab_postgres_cert_server_postgres_cert.pem
  args:
    creates: "{{ GISLAB_PATH_SECRET }}/gislab_postgres_cert_server_postgres_cert.pem"

- name: Install certificate and private key for encrypted PostgreSQL communication
  shell: "{{ item }}"
  with_items:
    - cp
      {{ GISLAB_PATH_SECRET }}/gislab_postgres_private_server_postgres_key.pem
      /storage/applications/postgresql/server.key
    - cp
      {{ GISLAB_PATH_SECRET }}/gislab_postgres_cert_server_postgres_cert.pem
      /storage/applications/postgresql/server.crt
  notify:
    - service postgresql restart

- name: Change owner and mode of certificate and private key for encrypted PostgreSQL communication
  file:
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
  with_items:
    - {
        dest: /storage/applications/postgresql/server.key,
        mode: "0600",
        owner: postgres
      }
    - {
        dest: /storage/applications/postgresql/server.crt,
        mode: "0644",
        owner: postgres
      }
  notify:
    - service postgresql restart

- name: Restart PostgreSQL service
  service:
    name: postgresql
    state: restarted


# user groups
- name: Create database superusers group (gislabadmins)
  postgresql_user:
    name: gislabadmins
    role_attr_flags: CREATEDB,CREATEROLE,SUPERUSER,NOLOGIN
    state: present
  become_user: postgres

- name: Create database users group
  postgresql_user:
    name: gislabusers
    role_attr_flags: NOCREATEDB,NOCREATEROLE,NOSUPERUSER,NOLOGIN
    state: present
  become_user: postgres


# postgis template database
- name: Remove template status from PostGIS template database if exists
  command: >
    psql -U postgres
    -c "UPDATE pg_database SET datistemplate='false' WHERE datname='template_postgis';"

- name: Drop PostGIS template database if exists
  postgresql_db:
    name: template_postgis
    state: absent
  become_user: postgres

- name: Create PostGIS template database
  postgresql_db:
    name: template_postgis
    encoding: 'UTF-8'
    template: template0
    state: present
  become_user: postgres

- name: Add PostGIS support to PostGIS template database
  command: >
    psql -U postgres -d template_postgis -c "CREATE EXTENSION postgis"

# TODO
# - name: Add PostgreSQL Comparator support to PostGIS template database
#   command: >
#     psql -U postgres -d template_postgis -c "CREATE EXTENSION pgcmp"

- name: Add History Audit support to PostGIS template database (run SELECT audit.audit_table('<schema>.<table>'); to enable)
  command: >
    psql -U postgres -d template_postgis
    -f {{ pg_sharedir.stdout }}/contrib/audit.sql

- name: Vacuum FULL PostGIS template database
  command: psql -U postgres -d template_postgis -c "VACUUM FULL;"

- name: Vacuum FREEZE PostGIS template database
  command: psql -U postgres -d template_postgis -c "VACUUM FREEZE;"

- name: Set template status to PostGIS template database
  command: >
    psql -U postgres
    -c "UPDATE pg_database SET datistemplate='true' WHERE datname='template_postgis';"

- name: Do not accept any connections to PostGIS template database
  command: >
    psql -U postgres
    -c "UPDATE pg_database SET datallowconn='false' WHERE datname='template_postgis';"


# database 'gislab'
- name: Create production database 'gislab'
  postgresql_db:
    name: gislab
    template: template_postgis
    state: present
  become_user: postgres

- name: Grant connection to 'gislab' database for 'gislabusers'
  command: >
    psql -U postgres
    -c "GRANT CONNECT ON DATABASE gislab TO gislabusers;"


# email
- name: Add service user mail alias
  lineinfile:
    dest: /etc/aliases
    line: "postgres: root"
    state: present

- name: Activate new mail alias
  command: newaliases


- meta: flush_handlers

# vim: set ts=8 sts=2 sw=2 et:
