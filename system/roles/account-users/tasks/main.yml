---
#
### USER ACCOUNTS ###
#
# Set strong password for provisioning user account, remove other not required
# user accounts, configure shell, create storage and install account
# configuration.


- name: Install packages
  apt:
    name: pwgen
    force: yes
    install_recommends: no
    state: latest


- name: Remove user accounts which does not belong to GIS.lab users
  # Reason of deleting these users is a fact, that some OS images are
  # containing multiple user accounts for provisioning (for example both
  # vagrant and ubuntu) and leaving them can cause security problem.
  # This task is performed only for accounts with ID in range 1000-1010.
  # GIS.lab user accounts IDs begin with 3000.
  shell: >
    for userid in {1000..1010}; do
    username=$(getent passwd $userid | awk -F ':' '{print $1}');
    if [ "$username" != "" -a "$username" != "{{ GISLAB_PROVISIONING_USER }}" ]; then
    deluser --remove-home $username;
    fi;
    done
  args:
    executable: /bin/bash


### PROVISIONING USER
- name: Set strong password for provisioning user account
  shell: >
    echo "{{ GISLAB_PROVISIONING_USER }}:$(pwgen -1 -n 24)"
    | chpasswd

- name: Set strong permissions to provisioning user account home directory
  file:
    path: "{{ item }}"
    mode: 0700
  with_items:
    - /home/{{ GISLAB_PROVISIONING_USER }}
    - /home/{{ GISLAB_PROVISIONING_USER }}/.ssh

- name: Configure shell prompt for provisioning user
  lineinfile:
    dest: /home/{{ GISLAB_PROVISIONING_USER }}/.bashrc
    regexp: "^PS1=.*h.GIS.lab(.*).*$"
    line: 'PS1="\[$(tput bold)\]\u@\h.GIS.lab({{ GISLAB_UNIQUE_ID }}):\w\\$\[$(tput sgr0)\] "'
    state: present


### ACCOUNT SKELETON
- name: Purge GIS.lab account installation directory
  file:
    dest: "{{ root_dir }}"
    state: absent


- name: Prepare directory for user accounts skeleton
  file:
    path: "{{ root_dir }}/skel"
    state: directory

- name: Copy basic user account skeleton files
  shell: >
    cp -a /etc/skel/.[a-zA-Z0-9]* {{ root_dir }}/skel


- name: Configure shell prompt
  lineinfile:
    dest: "{{ root_dir }}/skel/.bashrc"
    regexp: "^PS1=.*h.GIS.lab(.*).*$"
    line: 'PS1="\[$(tput bold)\]\u@\h.GIS.lab({{ GISLAB_UNIQUE_ID }}):\w\\$\[$(tput sgr0)\] "'
    state: present


- name: Prepare .config directory in skeleton
  file:
    path: "{{ root_dir }}/skel/.config"
    state: directory

- name: Prepare autostart directory in skeleton
  file:
    path: "{{ root_dir }}/skel/.config/autostart"
    state: directory


- name: Install filesystem bookmarks
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - {
        src: bookmarks/gtk-bookmarks.j2,
        dest: "{{ root_dir }}/skel/.gtk-bookmarks"
      }


- name: Install Conky autostart file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - {
        src: conky/conky.desktop.j2,
        dest: "{{ root_dir }}/skel/.config/autostart/conky.desktop"
      }


- name: Install Mutt configuration
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - {
        src: mutt/muttrc.j2,
        dest: "{{ root_dir }}/skel/.muttrc"
      }


- name: Prepare Pidgin directory in skeleton
  file:
    path: "{{ root_dir }}/skel/.purple"
    state: directory

- name: Install Pidgin configuration
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - {
        src: pidgin/accounts.xml.j2,
        dest: "{{ root_dir }}/skel/.purple/accounts.xml"
      }
    - {
        src: pidgin/blist.xml.j2,
        dest: "{{ root_dir }}/skel/.purple/blist.xml"
      }


- name: Prepare QGIS directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ root_dir }}/skel/.local/share/QGIS/QGIS3/profiles/default/QGIS"

- name: Install QGIS configuration
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - {
        src: qgis/QGIS3.conf.j2,
        dest: "{{ root_dir }}/skel/.local/share/QGIS/QGIS3/profiles/default/QGIS/QGIS3.ini"
      }

- name: Prepare GRASS directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ root_dir }}/skel/.grass8"
    - "{{ root_dir }}/skel/Data/grassdata"

- name: Install GRASS configuration
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - {
        src: grass/rc.j2,
        dest: "{{ root_dir }}/skel/.grass8/rc"
      }

- name: Install GRASS locations
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0755
  with_items:
    - {
        src: static/grassdata/,
        dest: "{{ root_dir }}/skel/Data/grassdata"
      }


- name: Add symlinks to shared directories in skeleton
  file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
    force: yes
    follow: no
  with_items:
    - {
        src: /mnt/repository,
        dest: "{{ root_dir }}/skel/Repository"
      }
    - {
        src: /mnt/barrel,
        dest: "{{ root_dir }}/skel/Barrel"
      }
    - {
        src: /mnt/publish,
        dest: "{{ root_dir }}/skel/Publish"
      }

- name: Add symlinks to fast, in-memory file system
  file:
    src: /mnt/booster
    dest: "{{ root_dir }}/skel/Booster"
    state: link
    force: yes
    follow: no


### STORAGE
- name: Create home storage for user\'s accounts
  file:
    path: "{{ GISLAB_PATH_HOME }}"
    state: directory


### ACCOUNT HOOKS
- name: Prepare directory for account hooks
  file:
    path: "{{ root_dir }}/hooks"
    state: directory

- name: Install account hooks
  copy:
    src: static/hooks/
    dest: "{{ root_dir }}/hooks"
    mode: 0755


### CUSTOM
- name: Prepare directories for accounts customization
  file:
    path: "{{ GISLAB_PATH_CUSTOM }}/accounts/{{ item }}"
    state: directory
  with_items:
    - before-add
    - after-add
    - before-delete
    - after-delete
    - files

# vim: set ts=8 sts=2 sw=2 et:
